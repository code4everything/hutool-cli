plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0-RC'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

String jcommanderVersion = "1.81"
String hutoolVersion = "5.7.2"
String oshiVersion = "5.7.5"
String emojiVersion = "5.1.1"
String zxingVersion = "3.4.1"
String pinyinVersion = "2.5.1"
String fastjsonVersion = "1.2.76"
String javassistVersion = "3.28.0-GA"
String junitVersion = "4.13.2"
String chalkVersion = "1.0.2"
String qlExpressVersion = "3.2.4"

dependencies {
    implementation "com.beust:jcommander:$jcommanderVersion"
    implementation "cn.hutool:hutool-core:$hutoolVersion"
    implementation "cn.hutool:hutool-system:$hutoolVersion"
    implementation "com.github.oshi:oshi-core:$oshiVersion"
    implementation "cn.hutool:hutool-crypto:$hutoolVersion"
    implementation "cn.hutool:hutool-http:$hutoolVersion"
    implementation "cn.hutool:hutool-script:$hutoolVersion"
    implementation "cn.hutool:hutool-extra:$hutoolVersion"
    implementation "com.vdurmont:emoji-java:$emojiVersion"
    implementation "com.google.zxing:core:$zxingVersion"
    implementation "com.belerweb:pinyin4j:$pinyinVersion"
    implementation "com.alibaba:fastjson:$fastjsonVersion"
    implementation "org.javassist:javassist:$javassistVersion"
    implementation "com.github.tomas-langer:chalk:$chalkVersion"
    implementation "com.alibaba:QLExpress:$qlExpressVersion"
    testImplementation "junit:junit:$junitVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

group = 'org.code4everything'
version = '1.3'
String hutoolCliVersion = version
description = 'hutool-cli'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    archiveName "hutool.jar"

    manifest {
        def map = ["Manifest-Version": "1.0", "Main-Class": "org.code4everything.hutool.Hutool"]
        attributes map
    }

    from {
        (configurations.runtimeClasspath).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    exclude 'META-INF/AL2.0'
    exclude 'META-INF/LGPL2.1'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
}

boolean isWin = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')

build.doFirst {
    println 'git pull'.execute().text.trim()
}

build.doLast {
    copy {
        from './build/libs/hutool.jar'
        into './hutool'
    }
}

task pack(dependsOn: ['clean', 'build']) {}

task install(dependsOn: 'pack') {
    exec {
        workingDir './src/main/go'
        if (isWin) {
            commandLine 'cmd', '/c', 'go build hutool.go'
        } else {
            commandLine 'bash', '-c', 'go build hutool.go'
        }
    }
    copy {
        from './src/main/go'
        into './hutool/bin'
        exclude 'hutool.go'
        rename 'hutool', 'hu'
    }
}

String[] platforms = new String[]{"windows", "linux", "darwin"}
3.times { counter ->
    task "release${counter}" {
        if (isWin) {
            return
        }

        String osName = platforms[counter]
        exec {
            workingDir './src/main/go'
            commandLine 'bash', '-c', "CGO_ENABLED=0 GOOS=${osName} GOARCH=amd64 go build hutool.go"
        }

        copy {
            from './src/main/go'
            into './hutool/bin/'
            exclude 'hutool.go'
            String newName = osName == 'darwin' ? 'hu-mac' : 'hu'
            rename 'hutool', newName
        }
        delete './src/main/go/hutool.exe'
        delete './src/main/go/hutool'
    }
}

task release(dependsOn: ['pack', 'release0', 'release1', 'release2'], type: Zip) {
    archiveName "hu-${hutoolCliVersion}.zip"
    destinationDir file('.')
    from './hutool'
    exclude 'method'
    exclude '*.json'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
